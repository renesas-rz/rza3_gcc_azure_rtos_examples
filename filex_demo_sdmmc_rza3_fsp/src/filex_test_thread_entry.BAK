#include "filex_test_thread.h"
#include "nonstdio.h"

#define FILE_NAME                 "test_file.txt"
#define FILE_CONTENTS                                                       \
  {                                                                         \
    0x44, 0x6F, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x67, 0x6F, 0x20, 0x67, 0x65, \
    0x6E, 0x74, 0x6C, 0x65, 0x20, 0x69, 0x6E, 0x74, 0x6F, 0x20, 0x74, 0x68, \
    0x61, 0x74, 0x20, 0x67, 0x6F, 0x6F, 0x64, 0x20, 0x6E, 0x69, 0x67, 0x68, \
    0x74, 0x2C, 0x20, 0x0A, 0x4F, 0x6C, 0x64, 0x20, 0x61, 0x67, 0x65, 0x20, \
    0x73, 0x68, 0x6F, 0x75, 0x6C, 0x64, 0x20, 0x62, 0x75, 0x72, 0x6E, 0x20, \
    0x61, 0x6E, 0x64, 0x20, 0x72, 0x61, 0x76, 0x65, 0x20, 0x61, 0x74, 0x20, \
    0x63, 0x6C, 0x6F, 0x73, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x64, 0x61, 0x79, \
    0x3B, 0x0A, 0x52, 0x61, 0x67, 0x65, 0x2C, 0x20, 0x72, 0x61, 0x67, 0x65, \
    0x20, 0x61, 0x67, 0x61, 0x69, 0x6E, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, \
    0x20, 0x64, 0x79, 0x69, 0x6E, 0x67, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, \
    0x65, 0x20, 0x6C, 0x69, 0x67, 0x68, 0x74, 0x2E, 0x0A                    \
  }

#define READ_BUFFER_SIZE          512

#define FILEX_TEST_MEDIA_FORMAT

/* ***************** Azure FileX API documentation ********************
 * The fx_media_check service requires scratch memory for its depth-first
 * analysis of directories and files in media. Specifically, the scratch
 * memory supplied to media check service must be large enough to hold
 * several directory entries, a data structure to "stack" the current directory
 * entry position before entering into subdirectories, and finally the logical
 * FAT bit map. The scratch memory should be at least 512-1024 bytes plus memory
 * for the logical FAT bit map, which requires as many bits as there are clusters
 * in media. For example, a device with 8000 clusters would require 1000
 * bytes to represent and thus require a total scratch area on the order of 2048
 * bytes.
 **************************************************************************/
#define SCRATCH_MEM_BYTES   (G_FX_MEDIA0_TOTAL_SECTORS / 8) + 1024
UCHAR scratch_memeory_region[SCRATCH_MEM_BYTES];

#define RESET_VALUE               (0)

#define FILEX_TEST_THREAD_MEDIA_INSERT_EVENT    (uint32_t)(1 << 0)
#define FILEX_TEST_THREAD_MEDIA_REMOVE_EVENT    (uint32_t)(1 << 1)

/* FileX Media Instance */
FX_MEDIA g_fx_media0;
uint8_t g_fx_media0_media_memory[G_FX_MEDIA0_MEDIA_MEMORY_SIZE];

/* function declarations */
static void filex_testing(void);
static void g_fx_media0_quick_setup();
static void error_handler(bool failed, const char *function_name, UINT error_code);

/* filex_test_thread entry function */
void filex_test_thread_entry(void)
{
    fsp_err_t err;
    uint32_t actual_events;

    /* Open media driver.*/
//    RM_FILEX_BLOCK_MEDIA_Open(&g_rm_filex_block_media_0_ctrl, &g_rm_filex_block_media_0_cfg);
    RM_FILEX_BLOCK_MEDIA_Close(&g_rm_filex_block_media_0_ctrl);

    err = RM_FILEX_BLOCK_MEDIA_Open(&g_rm_filex_block_media_0_ctrl, &g_rm_filex_block_media_0_cfg);
    error_handler(FSP_SUCCESS != err, "RM_FILEX_BLOCK_MEDIA_Open", err);

    io_thread_printf("Waiting for media insert...\r\n");
    do
    {
        actual_events = 0;
        tx_event_flags_get (&g_media_event_flags,
                        FILEX_TEST_THREAD_MEDIA_INSERT_EVENT|FILEX_TEST_THREAD_MEDIA_REMOVE_EVENT,
                        TX_OR_CLEAR,
                        &actual_events,
                        TX_WAIT_FOREVER);
    } while(!((actual_events&FILEX_TEST_THREAD_MEDIA_INSERT_EVENT)!=0));

    io_thread_printf("\r\nMedia is inserted!\r\n");

    io_thread_printf("Start FileX testing...\r\n");
    filex_testing();

    io_thread_printf("\r\nWaiting for media remove...\r\n");
    tx_event_flags_get (&g_media_event_flags,
                        FILEX_TEST_THREAD_MEDIA_REMOVE_EVENT,
                        TX_AND_CLEAR,
                        &actual_events,
                        TX_WAIT_FOREVER);

    RM_FILEX_BLOCK_MEDIA_Close(&g_rm_filex_block_media_0_ctrl);
    error_handler(FSP_SUCCESS != err, "RM_FILEX_BLOCK_MEDIA_Close", err);

    io_thread_printf("Media closed\r\n");
    io_thread_printf("The test has passed\r\n\r\n");
    tx_thread_sleep(TX_WAIT_FOREVER);
}

static void filex_testing(void)
{
    UINT err = RESET_VALUE;
    ULONG actual_Rbyte = RESET_VALUE;
    FX_FILE my_file;
    uint8_t file_write_data[] = FILE_CONTENTS;
    ULONG file_size = sizeof(file_write_data)/sizeof(file_write_data[0]);
    uint8_t file_read_data[READ_BUFFER_SIZE] = {RESET_VALUE};

    io_thread_printf("Initializing FileX...\r\n");
    fx_system_initialize();

    io_thread_printf("Setting up media...\r\n");
    g_fx_media0_quick_setup();
#if 0

    io_thread_printf("Trying to create a file: \x1b[1m%s\x1b[0m...\r\n", FILE_NAME);
    err = fx_file_create(&g_fx_media0, FILE_NAME);
    if (err == FX_ALREADY_CREATED)
    {
        io_thread_printf("File \x1b[1m%s\x1b[0m already exists\r\n", FILE_NAME);
    }
    else
    {
        error_handler(FX_SUCCESS != err, "fx_file_create", err);
    }

    io_thread_printf("Opening the file on write mode...\r\n");
    err = fx_file_open(&g_fx_media0, &my_file, FILE_NAME, FX_OPEN_FOR_WRITE);
    error_handler(FX_SUCCESS != err, "fx_file_open", err);

    io_thread_printf("Moving the cursor to the beginning of the file...\r\n");
    err = fx_file_seek(&my_file, 0);
    error_handler(FX_SUCCESS != err, "fx_file_seek", err);

    io_thread_printf("Writing the file to media...\r\n");
    err = fx_file_write(&my_file, file_write_data, file_size);
    error_handler(FX_SUCCESS != err, "fx_file_write", err);

    io_thread_printf("Closing the file...\r\n");
    err = fx_file_close(&my_file);
    error_handler(FX_SUCCESS != err, "fx_file_close", err);

    io_thread_printf("Reopening media...\r\n");
    err = fx_file_open(&g_fx_media0, &my_file, FILE_NAME, FX_OPEN_FOR_READ);
    error_handler(FX_SUCCESS != err, "fx_file_open", err);

    io_thread_printf("Reading the file content from media...\r\n");
    err = fx_file_read(&my_file, file_read_data, READ_BUFFER_SIZE, &actual_Rbyte);
    error_handler(FX_SUCCESS != err, "fx_file_read", err);

    io_thread_printf("File reading succeeded, and the content is:\r\n\r\n\x1b[1m%s\x1b[0m\r\n\r\n", file_read_data);

    io_thread_printf("Closing the file...\r\n");
    err = fx_file_close(&my_file);
    error_handler(FX_SUCCESS != err, "fx_file_close", err);

    io_thread_printf("Deleting the file...\r\n");
    err = fx_file_delete(&g_fx_media0, FILE_NAME);
    error_handler(FX_SUCCESS != err, "fx_file_delete", err);

    io_thread_printf("File closed\r\n");
#endif

//    fx_media_flush(&g_fx_media0);
//    fx_media_close(&g_fx_media0);
}

/* Callback function */
void g_rm_filex_block_media_0_callback(rm_filex_block_media_callback_args_t *p_args)
{
    if ((p_args->event&RM_BLOCK_MEDIA_EVENT_MEDIA_INSERTED)!=0)
    {
        tx_event_flags_set (&g_media_event_flags, FILEX_TEST_THREAD_MEDIA_INSERT_EVENT, TX_OR);
    }
    if ((p_args->event&RM_BLOCK_MEDIA_EVENT_MEDIA_REMOVED)!=0)
    {
        tx_event_flags_set (&g_media_event_flags, FILEX_TEST_THREAD_MEDIA_REMOVE_EVENT, TX_OR);
    }
}

#ifdef FILEX_TEST_MEDIA_FORMAT
static void format_media(FX_MEDIA* fx_media)
{
    /* As per Azure FileX documentation
     * "fx_media_format" service must be called prior to opening media."
     * hence closing media and opening it back after formatting is successful"
     */
    fx_media_close(fx_media);
    io_thread_printf("Formatting media\r\n");
    UINT err = fx_media_format(fx_media,                                    // Pointer to FileX media control block.
                               RM_FILEX_BLOCK_MEDIA_BlockDriver,            // Driver entry
                               (void *) &g_rm_filex_block_media_0_instance, // Pointer to Block Media Driver
                               g_fx_media0_media_memory,                    // Media buffer pointer
                               G_FX_MEDIA0_MEDIA_MEMORY_SIZE,               // Media buffer size
                               (char *) G_FX_MEDIA0_VOLUME_NAME,            // Volume Name
                               G_FX_MEDIA0_NUMBER_OF_FATS,                  // Number of FATs
                               G_FX_MEDIA0_DIRECTORY_ENTRIES,               // Directory Entries
                               G_FX_MEDIA0_HIDDEN_SECTORS,                  // Hidden sectors
                               G_FX_MEDIA0_TOTAL_SECTORS,                   // Total sectors
                               G_FX_MEDIA0_BYTES_PER_SECTOR,                // Sector size
                               G_FX_MEDIA0_SECTORS_PER_CLUSTER,             // Sectors per cluster
                               1,                                           // Heads (disk media)
                               1);                                          // Sectors per track (disk media)
    error_handler(FX_SUCCESS != err, "fx_media_format", err);
}
#endif

/* Quick setup for g_fx_media0.
 * - g_rm_filex_block_media_0 must be setup before calling this function
 *     (See Developer Assistance -> g_fx_media0 -> g_rm_filex_block_media_0 -> Quick Setup).
 * - fx_system_initialize() must be called before calling this function.
 */
static void g_fx_media0_quick_setup()
{
    UINT err;

    io_thread_printf("opening media...\r\n");
    err = fx_media_open(&g_fx_media0,
                        "&g_fx_media0",
                        RM_FILEX_BLOCK_MEDIA_BlockDriver,
                        (void *) &g_rm_filex_block_media_0_instance,
                        g_fx_media0_media_memory,
                        G_FX_MEDIA0_MEDIA_MEMORY_SIZE);
    switch(err)
    {
        case FX_FAT_READ_ERROR:
        case FX_BOOT_ERROR:
            io_thread_printf("Media was booting failed, we'll check and try to format it\r\n");
            break;
        default:
            error_handler(FX_SUCCESS != err, "g_fx_media0_quick_setup::fx_media_open", err);
    }

    /*
     * Check for FileX media device compatibility
     * for example - if "FAT" is not created or any other
     * file system errors are present This API returns an error and
     * media device will be formatted before further usage
     * As per Azure documentation and function definition
     * media must be opened before performing media check */
    ULONG err_detection = RESET_VALUE;
    io_thread_printf("Checking media...\r\n");
    err = fx_media_check(&g_fx_media0, scratch_memeory_region, SCRATCH_MEM_BYTES,
                         (FX_FAT_CHAIN_ERROR |FX_DIRECTORY_ERROR |FX_LOST_CLUSTER_ERROR |FX_FILE_SIZE_ERROR),
                         &err_detection);

    if ((FX_SUCCESS != err) || (0 != err_detection))
    {
        io_thread_printf("Checking media error detection value is: 0x%x\r\n", err_detection);
#ifdef FILEX_TEST_MEDIA_FORMAT
        io_thread_printf("Checking media returned value is 0x%x\r\n", err);
        io_thread_printf("try to format media\r\n");
        format_media(&g_fx_media0);
        io_thread_printf("The format is finished, try to open it...\r\n");
        err = fx_media_open(&g_fx_media0,
                            "&g_fx_media0",
                            RM_FILEX_BLOCK_MEDIA_BlockDriver,
                            (void *) &g_rm_filex_block_media_0_instance,
                            g_fx_media0_media_memory,
                            G_FX_MEDIA0_MEDIA_MEMORY_SIZE);
        error_handler(FX_SUCCESS != err, "g_fx_media0_quick_setup::fx_media_open", err);
#else
        error_handler(true, "g_fx_media0_quick_setup::fx_media_check", err);
#endif
    }
}

static void error_handler(bool failed, const char *function_name, UINT error_code)
{
    if (failed)
    {
        io_thread_printf("%s failed with error code: 0x%x\r\n", function_name, error_code);
        fx_media_close(&g_fx_media0);
        RM_FILEX_BLOCK_MEDIA_Close(&g_rm_filex_block_media_0_ctrl);
        io_thread_printf("Media closed\r\n");
        tx_thread_terminate (tx_thread_identify());
    }
}
