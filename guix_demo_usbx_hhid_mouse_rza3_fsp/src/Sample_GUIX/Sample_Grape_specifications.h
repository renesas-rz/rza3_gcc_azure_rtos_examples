/*******************************************************************************/
/*  This file is auto-generated by Azure RTOS GUIX Studio. Do not edit this    */
/*  file by hand. Modifications to this file should only be made by running    */
/*  the Azure RTOS GUIX Studio application and re-generating the application   */
/*  specification file(s). For more information please refer to the Azure RTOS */
/*  GUIX Studio User Guide, or visit our web site at azure.com/rtos            */
/*                                                                             */
/*  GUIX Studio Revision 6.1.12.0                                              */
/*  Date (dd.mm.yyyy):  5. 7.2023   Time (hh:mm): 10:26                        */
/*******************************************************************************/


#ifndef _SAMPLE_GRAPE_SPECIFICATIONS_H_
#define _SAMPLE_GRAPE_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define Home_B 1
#define CS_0 2
#define Refri_B 3
#define Wash_B 4
#define Microwave_B 5
#define Movie_B 6
#define Info_B 7
#define Thermo_Slider 8
#define BU_3 9
#define BU_4 10
#define BD_3 11
#define BD_4 12
#define RB_1 13
#define RB_2 14
#define RB_5 15
#define Slider1 16
#define RB_4 17
#define RB_3 18


/* Define animation ids                                                        */

#define TIME_COMP 1
#define TIME_COMP_IN 2
#define TIME_COMP_OUT 3
#define GX_NEXT_ANIMATION_ID 4


/* Define user event ids                                                       */

enum user_defined_events{
    TOGGLE_EVENT = GX_FIRST_USER_EVENT,
    B1_RIGHT_MOVE,
    B2_RIGHT_MOVE,
    B1_LEFT_MOVE,
    B2_LEFT_MOVE,
    B1_SHOW,
    B2_SHOW,
    SWIPE_IN_TIME,
    SWIPE_IN_BUTTON_1,
    SWIPE_IN_BUTTON_2,
    SWIPE_OUT_TIME,
    SWIPE_OUT_BUTTON_1,
    SWIPE_OUT_BUTTON_2,
    GX_NEXT_USER_EVENT_ID
};

#define GX_ACTION_FLAG_DYNAMIC_TARGET 0x01
#define GX_ACTION_FLAG_DYNAMIC_PARENT 0x02
#define GX_ACTION_FLAG_POP_TARGET     0x04
#define GX_ACTION_FLAG_POP_PARENT     0x08

typedef struct GX_STUDIO_ACTION_STRUCT
{
    GX_UBYTE opcode;
    GX_UBYTE flags;
    GX_CONST VOID *parent;
    GX_CONST VOID *target;
    GX_CONST GX_ANIMATION_INFO  *animation;
} GX_STUDIO_ACTION;

typedef struct GX_STUDIO_EVENT_ENTRY_STRUCT
{
    ULONG event_type;
    USHORT event_sender;
    GX_CONST GX_STUDIO_ACTION *action_list;
} GX_STUDIO_EVENT_ENTRY;

typedef struct GX_STUDIO_EVENT_PROCESS_STRUCT 
{
    GX_CONST GX_STUDIO_EVENT_ENTRY *event_table;
    UINT (*chain_event_handler)(GX_WIDGET *, GX_EVENT *);
} GX_STUDIO_EVENT_PROCESS;

/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID string_id; 
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID off_pixelmap_id;
    GX_RESOURCE_ID on_pixelmap_id;
    GX_RESOURCE_ID off_disabled_pixelmap_id;
    GX_RESOURCE_ID on_disabled_pixelmap_id;
} GX_RADIO_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    int min_val;
    int max_val;
    int current_val;
    int increment;
    GX_VALUE min_travel;
    GX_VALUE max_travel;
    GX_VALUE needle_width;
    GX_VALUE needle_height;
    GX_VALUE needle_inset;
    GX_VALUE needle_hotspot;
    GX_RESOURCE_ID lower_pixelmap;
    GX_RESOURCE_ID upper_pixelmap;
    GX_RESOURCE_ID needle_pixelmap;
} GX_PIXELMAP_SLIDER_PROPERTIES;

typedef struct
{
    GX_VALUE       xcenter;
    GX_VALUE       ycenter;
    USHORT         radius;
    USHORT         track_width;
    GX_VALUE       needle_offset;
    GX_VALUE       current_angle;
    GX_VALUE       min_angle;
    GX_VALUE       max_angle;
    GX_RESOURCE_ID background_pixelmap;
    GX_RESOURCE_ID needle_pixelmap;
    USHORT         animation_total_steps;
    USHORT         animation_delay;
    USHORT         animation_style;
    VOID         (*animation_update_callback)(struct GX_RADIAL_SLIDER_STRUCT *slider);
} GX_RADIAL_SLIDER_PROPERTIES;

typedef struct
{
    GX_SPRITE_FRAME *frame_list;
    USHORT           frame_count;
} GX_SPRITE_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    VOID (*format_func)(GX_NUMERIC_PROMPT *, INT);
    INT            numeric_prompt_value;
} GX_NUMERIC_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct SCREEN5_INFORMATION_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW Screen5_Information_Time_window;
    GX_ICON Screen5_Information_Hour_1;
    GX_ICON Screen5_Information_Hour_2;
    GX_ICON Screen5_Information_Colon_1;
    GX_ICON Screen5_Information_Colon_2;
    GX_ICON Screen5_Information_Min_1;
    GX_ICON Screen5_Information_Min_2;
    GX_ICON Screen5_Information_Sec_1;
    GX_ICON Screen5_Information_Sec_2;
    GX_PIXELMAP_BUTTON Screen5_Information_Home_Button;
    GX_SPRITE Screen5_Information_click_sprite;
    GX_WINDOW Screen5_Information_Button_window_1;
    GX_ICON Screen5_Information_icon_back;
    GX_PIXELMAP_BUTTON Screen5_Information_refrigerator_button;
    GX_PIXELMAP_BUTTON Screen5_Information_washer_button;
    GX_PIXELMAP_BUTTON Screen5_Information_microwave_button;
    GX_PIXELMAP_BUTTON Screen5_Information_movie_button;
    GX_WINDOW Screen5_Information_Button_window_2;
    GX_ICON Screen5_Information_icon_back_1;
    GX_PIXELMAP_BUTTON Screen5_Information_information_button;
} SCREEN5_INFORMATION_CONTROL_BLOCK;

typedef struct SCREEN4_MOVIE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW Screen4_Movie_Time_window;
    GX_PIXELMAP_BUTTON Screen4_Movie_Home_Button;
    GX_ICON Screen4_Movie_Hour_1;
    GX_ICON Screen4_Movie_Hour_2;
    GX_ICON Screen4_Movie_Colon_1;
    GX_ICON Screen4_Movie_Colon_2;
    GX_ICON Screen4_Movie_Min_1;
    GX_ICON Screen4_Movie_Min_2;
    GX_ICON Screen4_Movie_Sec_1;
    GX_ICON Screen4_Movie_Sec_2;
    GX_SPRITE Screen4_Movie_click_sprite;
    GX_WINDOW Screen4_Movie_Button_window_1;
    GX_ICON Screen4_Movie_icon_back;
    GX_PIXELMAP_BUTTON Screen4_Movie_refrigerator_button;
    GX_PIXELMAP_BUTTON Screen4_Movie_washer_button;
    GX_PIXELMAP_BUTTON Screen4_Movie_microwave_button;
    GX_PIXELMAP_BUTTON Screen4_Movie_movie_button;
    GX_WINDOW Screen4_Movie_Button_window_2;
    GX_ICON Screen4_Movie_icon_back_1;
    GX_PIXELMAP_BUTTON Screen4_Movie_information_button;
} SCREEN4_MOVIE_CONTROL_BLOCK;

typedef struct SCREEN3_OVEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_RADIAL_SLIDER Screen3_Oven_radial_slider_1;
    GX_RADIO_BUTTON Screen3_Oven_Microwave_Button;
    GX_PIXELMAP_BUTTON Screen3_Oven_MinUp_button_1;
    GX_PIXELMAP_BUTTON Screen3_Oven_MinUp_button_2;
    GX_PIXELMAP_BUTTON Screen3_Oven_MinDown_button_1;
    GX_PIXELMAP_BUTTON Screen3_Oven_MinDown_button_2;
    GX_NUMERIC_PROMPT Screen3_Oven_Min_Prompt_1;
    GX_NUMERIC_PROMPT Screen3_Oven_Min_Prompt_2;
    GX_ICON Screen3_Oven_icon_1;
    GX_ICON Screen3_Oven_icon_2;
    GX_ICON Screen3_Oven_icon_3;
    GX_RADIO_BUTTON Screen3_Oven_Start_Button;
    GX_RADIO_BUTTON Screen3_Oven_Stop_Button;
    GX_WINDOW Screen3_Oven_Time_window;
    GX_PIXELMAP_BUTTON Screen3_Oven_Home_Button;
    GX_ICON Screen3_Oven_Hour_1;
    GX_ICON Screen3_Oven_Hour_2;
    GX_ICON Screen3_Oven_Colon_1;
    GX_ICON Screen3_Oven_Colon_2;
    GX_ICON Screen3_Oven_Min_1;
    GX_ICON Screen3_Oven_Min_2;
    GX_ICON Screen3_Oven_Sec_1;
    GX_ICON Screen3_Oven_Sec_2;
    GX_SPRITE Screen3_Oven_click_sprite;
    GX_WINDOW Screen3_Oven_Button_window_1;
    GX_ICON Screen3_Oven_icon_back;
    GX_PIXELMAP_BUTTON Screen3_Oven_refrigerator_button;
    GX_PIXELMAP_BUTTON Screen3_Oven_washer_button;
    GX_PIXELMAP_BUTTON Screen3_Oven_microwave_button;
    GX_PIXELMAP_BUTTON Screen3_Oven_movie_button;
    GX_WINDOW Screen3_Oven_Button_window_2;
    GX_ICON Screen3_Oven_icon_back_1;
    GX_PIXELMAP_BUTTON Screen3_Oven_information_button;
} SCREEN3_OVEN_CONTROL_BLOCK;

typedef struct SCREEN2_WASHER_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_RADIO_BUTTON Screen2_Washer_Water_Level_1;
    GX_RADIO_BUTTON Screen2_Washer_Water_Level_2;
    GX_RADIO_BUTTON Screen2_Washer_Water_Level_3;
    GX_WINDOW Screen2_Washer_Time_window;
    GX_PIXELMAP_BUTTON Screen2_Washer_Home_Button;
    GX_ICON Screen2_Washer_Hour_1;
    GX_ICON Screen2_Washer_Hour_2;
    GX_ICON Screen2_Washer_Colon_1;
    GX_ICON Screen2_Washer_Colon_2;
    GX_ICON Screen2_Washer_Min_1;
    GX_ICON Screen2_Washer_Min_2;
    GX_ICON Screen2_Washer_Sec_1;
    GX_ICON Screen2_Washer_Sec_2;
    GX_SPRITE Screen2_Washer_click_sprite;
    GX_WINDOW Screen2_Washer_circledraw_window;
    GX_RADIAL_SLIDER Screen2_Washer_radial_slider;
    GX_WINDOW Screen2_Washer_RadioButton_window;
    GX_RADIO_BUTTON Screen2_Washer_Stop_Button;
    GX_RADIO_BUTTON Screen2_Washer_Start_Button;
    GX_WINDOW Screen2_Washer_Button_window_1;
    GX_ICON Screen2_Washer_icon_back;
    GX_PIXELMAP_BUTTON Screen2_Washer_refrigerator_button;
    GX_PIXELMAP_BUTTON Screen2_Washer_washer_button;
    GX_PIXELMAP_BUTTON Screen2_Washer_microwave_button;
    GX_PIXELMAP_BUTTON Screen2_Washer_movie_button;
    GX_WINDOW Screen2_Washer_Button_window_2;
    GX_ICON Screen2_Washer_icon_back_1;
    GX_PIXELMAP_BUTTON Screen2_Washer_information_button;
} SCREEN2_WASHER_CONTROL_BLOCK;

typedef struct SCREEN1_REFRIGERATOR_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_RADIO_BUTTON Screen1_Refrigerator_radio_button;
    GX_RADIO_BUTTON Screen1_Refrigerator_radio_button_1;
    GX_RADIO_BUTTON Screen1_Refrigerator_radio_button_4;
    GX_ICON Screen1_Refrigerator_Slider1_icon;
    GX_ICON Screen1_Refrigerator_Slider2_icon_1;
    GX_ICON Screen1_Refrigerator_Slider2_icon_3;
    GX_ICON Screen1_Refrigerator_Slider2_icon_2;
    GX_ICON Screen1_Refrigerator_Slider3_icon;
    GX_WINDOW Screen1_Refrigerator_Time_window;
    GX_PIXELMAP_BUTTON Screen1_Refrigerator_Home_Button;
    GX_ICON Screen1_Refrigerator_Hour_1;
    GX_ICON Screen1_Refrigerator_Hour_2;
    GX_ICON Screen1_Refrigerator_Colon_1;
    GX_ICON Screen1_Refrigerator_Colon_2;
    GX_ICON Screen1_Refrigerator_Min_1;
    GX_ICON Screen1_Refrigerator_Min_2;
    GX_ICON Screen1_Refrigerator_Sec_1;
    GX_ICON Screen1_Refrigerator_Sec_2;
    GX_PIXELMAP_SLIDER Screen1_Refrigerator_pixelmap_slider_1;
    GX_PIXELMAP_SLIDER Screen1_Refrigerator_pixelmap_slider;
    GX_RADIO_BUTTON Screen1_Refrigerator_radio_button_3;
    GX_SPRITE Screen1_Refrigerator_click_sprite;
    GX_WINDOW Screen1_Refrigerator_Button_window_1;
    GX_ICON Screen1_Refrigerator_icon_back;
    GX_PIXELMAP_BUTTON Screen1_Refrigerator_refrigerator_button;
    GX_PIXELMAP_BUTTON Screen1_Refrigerator_washer_button;
    GX_PIXELMAP_BUTTON Screen1_Refrigerator_microwave_button;
    GX_PIXELMAP_BUTTON Screen1_Refrigerator_movie_button;
    GX_RADIO_BUTTON Screen1_Refrigerator_radio_button_2;
    GX_WINDOW Screen1_Refrigerator_Button_window_2;
    GX_ICON Screen1_Refrigerator_icon_back_1;
    GX_PIXELMAP_BUTTON Screen1_Refrigerator_information_button;
} SCREEN1_REFRIGERATOR_CONTROL_BLOCK;

typedef struct SCREEN0_HOME_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW Screen0_Home_Time_window;
    GX_ICON Screen0_Home_Year_1;
    GX_ICON Screen0_Home_Year_2;
    GX_ICON Screen0_Home_Year_3;
    GX_ICON Screen0_Home_Year_4;
    GX_ICON Screen0_Home_Haihun_1;
    GX_ICON Screen0_Home_Month_1;
    GX_ICON Screen0_Home_Month_2;
    GX_ICON Screen0_Home_Haihun_2;
    GX_ICON Screen0_Home_Day_1;
    GX_ICON Screen0_Home_Day_2;
    GX_ICON Screen0_Home_Week;
    GX_ICON Screen0_Home_Hour_1;
    GX_ICON Screen0_Home_Hour_2;
    GX_ICON Screen0_Home_Colon_1;
    GX_ICON Screen0_Home_Colon_2;
    GX_ICON Screen0_Home_Min_1;
    GX_ICON Screen0_Home_Min_2;
    GX_ICON Screen0_Home_Sec_1;
    GX_ICON Screen0_Home_Sec_2;
    GX_WINDOW Screen0_Home_Button_window_1;
    GX_ICON Screen0_Home_icon_back;
    GX_PIXELMAP_BUTTON Screen0_Home_refrigerator_button;
    GX_PIXELMAP_BUTTON Screen0_Home_washer_button;
    GX_PIXELMAP_BUTTON Screen0_Home_microwave_button;
    GX_PIXELMAP_BUTTON Screen0_Home_movie_button;
    GX_SPRITE Screen0_Home_click_sprite;
    GX_WINDOW Screen0_Home_popup_window;
    GX_ICON Screen0_Home_renesas_logo;
    GX_WINDOW Screen0_Home_Button_window_2;
    GX_ICON Screen0_Home_icon_back_1;
    GX_PIXELMAP_BUTTON Screen0_Home_information_button;
} SCREEN0_HOME_CONTROL_BLOCK;

typedef struct SCREEN_TITLE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
} SCREEN_TITLE_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern SCREEN5_INFORMATION_CONTROL_BLOCK Screen5_Information;
extern SCREEN4_MOVIE_CONTROL_BLOCK Screen4_Movie;
extern SCREEN3_OVEN_CONTROL_BLOCK Screen3_Oven;
extern SCREEN2_WASHER_CONTROL_BLOCK Screen2_Washer;
extern SCREEN1_REFRIGERATOR_CONTROL_BLOCK Screen1_Refrigerator;
extern SCREEN0_HOME_CONTROL_BLOCK Screen0_Home;
extern SCREEN_TITLE_CONTROL_BLOCK Screen_Title;
#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT information_event(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT movie_event(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT oven_event(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT washer_event(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID circle_draw(GX_WINDOW *widget);
UINT radial_slider_function(GX_RADIAL_SLIDER *widget, GX_EVENT *event_ptr);
UINT refrigerator_event(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT digitalic_function(GX_PIXELMAP_SLIDER *widget, GX_EVENT *event_ptr);
UINT home_event(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT popup_function(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT title_event(GX_WINDOW *widget, GX_EVENT *event_ptr);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_STRING **language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
    USHORT     rotation_angle;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_radio_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_slider_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_radial_slider_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_sprite_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_numeric_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);
UINT gx_studio_auto_event_handler(GX_WIDGET *widget, GX_EVENT *event_ptr, GX_CONST GX_STUDIO_EVENT_PROCESS *record);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
